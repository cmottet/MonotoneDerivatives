bubble_sort(rpois(10,1))
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- array[i]
}
return(array)
}
bubble_sort(rpois(10,4))
bubble_sort <- function(array){
n <- length(array)
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j+1] < array[j]) {
tmp <- array[j]
array[j] <- array[j+1]
array[j+1] <- tmp
}
}
}
return(array)
}
bubble_sort(rpois(10,4))
bubble_sort(rpois(10,4))
bubble_sort(rpois(20,4))
bubble_sort(rpois(20,10))
bubble_sort(rpois(20,10))
bubble_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
rpois(20,10)
x <- rpois(20,10)
selection_sort(x)
x
x <- rpois(20,10)
bubble_sort(x)
x
sort(x)
selection_sort(x) == sort(x)
x
selection_sort(x)
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- tmp
}
return(array)
}
x <- rpois(20,10)
selection_sort(x) == sort(x)
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
rpois(20,10)
selection_sort(rpois(20,10))
output <- NULL
array
n <- length(array)
output <- NULL
array
i=1
tmp <- array[i]
j <- i
tmp < array[i-1]
j > 0
tmp < array[i-1] && j > 0
tmp < array[i-1] & j > 0
insert_sort <- function(array){
n <- length(array)
output <- NULL
for (i in 1:n){
tmp <- array[i]
j <- i
while(j > 1){
if (tmp < array[j-1]){
array[j] <- array[j-1]
j <- j-1
}
}
array[j] <- tmp
}
return(array)
}
insert_sort(rpois(20,10))
insert_sort <- function(array){
n <- length(array)
output <- NULL
for (i in 1:n){
tmp <- array[i]
j <- i
while(j > 1){
if (tmp < array[j-1]){
array[j] <- array[j-1]
j <- j-1
}else break
}
array[j] <- tmp
}
return(array)
}
insert_sort(rpois(20,10))
x<- rpois(20,10)
insert_sort(x)
x
parse("1+!")
parse("1+1")
parse(text="1+1")
expression(1+1)
bar <- function(x)print(x + 1)
bar(1)
eval(parse(text = "bar(x)"))
x = 3
eval(parse(text = "bar(x)"))
n = 200
p = 0.2
?prop.test
x <- rbinom(1,153,0.25)
x1 <- rbinom(1,153,0.25)
x2 <- rbinom(1,153,0.2)
x1
x2 <- rbern(153,0.2)
install.packages("LaplacesDemon")
x2 <- rbern(153,0.2)
library(LaplacesDemon)
x2 <- rbern(153,0.2)
x1 <- rbern(100,0.25)
x1
x2 <- rbinom(1,153,0.2)
x1 <- rbinom(1,100,0.25)
prop.test(c(x1,x2), c(100,153), p = c(0.25, 0.20))
prop.test(c(x1,x2), c(100,153), p = c(0.5, 0.20))
prop.test(c(x1,x2), c(100,153))
prop.test
prop.test(c(x1,x2), c(100,153), alternative = "less")
prop.test(c(x1,x2), c(100,153), alternative = "less", p = c(0.2,0.25))
prop.test(c(x1,x2), c(100,153), alternative = "less", p = c(0.25,0.2))
45/308
28229094+58722528.0+61558628.0+62952272.0
tot=28229094+58722528.0+61558628.0+62952272.0
58722528.0/tot
129833.0/2168608.0
110*100
110*100 + 8000 + 500 + 1000 + 2000 + 1000 + 750 + 300
110*75 + 8000 + 500 + 1000 + 2000 + 1000 + 750 + 300
factorial(11)
factorial(11)/11
ptm <- proc.time(); v = 1:10; permutations(n=length(v),r=length(v), v=v, repeats.allowed=F); proc.time() -ptm
library(gtools)
ptm <- proc.time(); v = 1:10; permutations(n=length(v),r=length(v), v=v, repeats.allowed=F); proc.time() -ptm
getwd()
43*40*50
120000*0.04
100000*0.04
100000*0.06
120000*0.06
2017-1945
8259 + 7138
8259 + 7138 - 2300 - 1000
8259 + 7138 - 2300 - 1100
8259 + 7138 - 2300 - 1100 - 798
2000/100
log(10^9)
10/0.5/0.5
140*12
67/55
1.21*37
3.3*2.2
2005-22
15.65+25.22+2.56+4.57+10.01+15.60+4
15.65+25.22+2.56+4.57+10.01+15.60+4+350+100
2.49*1.14
1144-544
122.84+185.31+203.72
36.97+56.08+198.29+6.35+27.64+
0
80+144+65+65+89+13+79
x1 = 80+144+65+65+89+13+79
x2 = 86+35+34+68+30+149.35+38+150
x2
x3=23+66+25+40+25+97+9+80+88+40
x3
x4 = 52+30+40+60+189+92+32+155
x4
x1+x2+x3+x4
(x1+x2+x3+x4)/4
130/30
4.3*7
x = c(17.72,20.13,16.49,16.67,18.83,32.66,125.39,175.27,182.05,163.58,127.28,54.64,22.61,20.18,16.86,15.87)
x
mean(x)
6/16
12/16
18/16
setwd("~/Projects/R/MonotoneDerivatives/")
remove(list = ls())
library(latex2exp)
library(ggplot2)
library(magrittr)
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim <- subset(optim, ParamCover & eps < 1e-5) #&ParamCover
tmp <- which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 ))
length(which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 )))
Data <- optim[tmp,]
J1 <- 0:3
J2 <- 3:1
NJ1 <- length(J1)+1 # To account for 0
NJ2 <- length(J2)-1
N <- NJ1 + NJ2
ParamNames <- names(Data)[1:N]
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply(direction*(cbind(uB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply(cbind(uB) - (1-P))/(1-P),1 ,min),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply((uB - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply((cbind(uB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
# labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
plot
convexData
Data
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
#  geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
# labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
Data
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply((cbind(lB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
#  geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
# labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim <- subset(optim, ParamCover & eps < 1e-5) #&ParamCover
tmp <- which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 ))
length(which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 )))
Data <- optim[tmp,]
J1 <- 0:3
J2 <- 3:1
NJ1 <- length(J1)+1 # To account for 0
NJ2 <- length(J2)-1
N <- NJ1 + NJ2
ParamNames <- names(Data)[1:N]
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply((cbind(lB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
#  geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
# labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
library(latex2exp)
library(ggplot2)
library(magrittr)
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
nrow(optim)
optim <- subset(optim, ParamCover & eps < 1e-5) #&ParamCover
nrow(optim)
tmp <- which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 ))
length(which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 )))
Data <- optim[tmp,]
J1 <- 0:3
J2 <- 3:1
NJ1 <- length(J1)+1 # To account for 0
NJ2 <- length(J2)-1
N <- NJ1 + NJ2
ParamNames <- names(Data)[1:N]
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply((cbind(lB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
#  geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
# labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
head(optim)
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
nrow(optim)
optim <- subset(optim, ParamCover & eps < 1e-5) #&ParamCover
nrow(optim)
tmp <- which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 ))
length(which(apply(optim[,13:17],1,function(x)sum(!is.na(x))>0 )))
Data <- optim[tmp,]
J1 <- 0:3
J2 <- 3:1
NJ1 <- length(J1)+1 # To account for 0
NJ2 <- length(J2)-1
N <- NJ1 + NJ2
ParamNames <- names(Data)[1:N]
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply((cbind(lB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
#  geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
# labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
nrow(Data)
Data$RelErr %>% min
Data$RelErr %>% max
designTab
designTab[1:20]
designTab[1:20,]
library(latex2exp)
library(ggplot2)
library(magrittr)
load("data/log_Hill_data_optimparam.Rdata")
load("data/MaxLogdHorrorDist_TailProb.Rdata")
optim <- subset(optim, ParamCover & eps < 1e-5) #&ParamCover
nrow(optim)
Data<-optim
J1 <- 0:3
J2 <- 3:1
NJ1 <- length(J1)+1 # To account for 0
NJ2 <- length(J2)-1
N <- NJ1 + NJ2
ParamNames <- names(Data)[1:N]
Data <- transform(Data,
nparam = as.factor(rowSums(Data[,1:N])),
J1empty = rowSums(Data[,(NJ2+1):N])==0,
J2empty = rowSums(Data[,1:NJ1])==0,
RelErr = with(Data,apply((cbind(lB) - (1-P))/(1-P),1 ,min)),
D  = as.factor(D),
Est = rowSums(Data[,1:NJ2]) >= 1,
param.inc = apply(Data[,1:N], 1,function(mat){paste(subset(ParamNames,unlist(mat)),collapse = ",")})
)
convexData <- subset(Data, (D==2) & (!d3) & (d2) & d1 & m0 & (!m1) & (!m2) & (!m3) )
maxErrRel <- expand.grid(D = 0:5, P = P) %>% transform(maxErrRel = P/(1-P))
plot <- ggplot(data = Data, aes(x = D, y = RelErr,text = param.inc,size = J1empty)) +
geom_jitter(width = 0.3,color = alpha("black",1/5)) +
geom_hline(data = maxErrRel, aes(yintercept = maxErrRel))+
#  geom_point(data = convexData, aes(x = D, y = RelErr, color="Convex Approach") ) +
facet_wrap(~P,ncol = 4,nrow = 4,
labeller = as_labeller(c("0.9" = "p = 90",
"0.99" = " p = 99",
"0.999" = " p = 99.9",
"0.9999" = " p = 99.99")))   +
coord_trans(y = "log10", limy = c(0.01,1.5e4)) +
scale_y_continuous(breaks =   c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4),
labels = c(0.25,1,2.5,10,25,1e2,250,1e3,2500,1e4)) +
scale_x_discrete(breaks =   seq(0,5,by = 2)) +
# labs(x = TeX('$D$'), y = TeX("Relative error"), size = TeX('Subset $\\mathit{J_1}$')) +
labs(x = TeX('$D$'), y = TeX("Relative error"), size = "", color="") +
scale_size_discrete(labels = c("At least one moment constraint","No moment constraint"))
plot
designTab[1:20,]
