1/(9*(b*x)^3) + sin(b*x)^2/(b*x)^4
}
x = seq(1,2,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,5),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,100),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,20),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5)/f(x),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(1,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(100,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(5000,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(500,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(500,1000,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
lines(x,1/9/x^3)
1/5
1/5^3
x = seq(1,1000,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
x = seq(0,10,by = 0.01)
plot(x, sin(epx(x)))
plot(x, sin(exp(x)))
plot(x, sin(exp(x)),type = "l")
plot(x, sin(log(x)),type = "l")
plot(x, sin^2(x),type = "l")
plot(x, sin(x)^2,type = "l")
x = seq(0,10,by = 0.01)
plot(x, log(x)/x^1)
x = seq(0,100)
plot(x,x/sin(x))
plot(x,x/sin(x),type = "l")
x = seq(0,1000)
plot(x,x/sin(x),type = "l")
plot(x,x*sin(x),type = "l")
plot(x,1/(x*sin(x)),type = "l")
log(1400)
bubble_sort <- function(array){
n <- length(array)
for (i in 1:n){
for (j in 1:n-i-1){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
}
bubble_sort <- function(array){
n <- length(array)
for (i in 1:n){
for (j in 1:n-i-1){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
return(array)
}
bubble_sort(c(1,4,3,2))
bubble_sort <- function(array){
n <- length(array)
for (i in 1:n){
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
return(array)
}
bubble_sort(c(1,4,3,2))
array <- c(1,4,3,2)
array
n <- length(array)
i
i<-1
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
j
n-i
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
array
i
j=1
array[j] < array[i]
j=2
array[j] < array[i]
j=3
array[j] < array[i]
n-i
tmp <- array[j]
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
j
i
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
array
bubble_sort <- function(array){
n <- length(array)
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
print(array)
}
return(array)
}
bubble_sort(c(1,4,3,2))
bubble_sort <- function(array){
n <- length(array)
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j+1] < array[j]) {
tmp <- array[j]
array[j] <- array[j+1]
array[j+1] <- tmp
}
}
print(array)
}
return(array)
}
bubble_sort(c(1,4,3,2))
bubble_sort(bin(10,1/2))
rbin(10,1/2)
rbinom(10,1/2)
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(100, 10,1/2))
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/4))
bubble_sort(rbinom(10, 100,1/4))
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < minimum) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- array[i]
}
return(array)
}
selection_sort(rbinom(10, 100,1/4))
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- array[i]
}
return(array)
}
selection_sort(rbinom(10, 100,1/4))
selection_sort(rbinom(10, 100,1/4))
selection_sort(rbinom(10, 100,1/4))
selection_sort(rbinom(20, 100,1/4))
selection_sort(rbinom(20, 100,1/2))
selection_sort(rbinom(20, 100,1/2))
selection_sort(rbinom(20, 100,1/2))
bubble_sort(rpois(10,1))
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- array[i]
}
return(array)
}
bubble_sort(rpois(10,4))
bubble_sort <- function(array){
n <- length(array)
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j+1] < array[j]) {
tmp <- array[j]
array[j] <- array[j+1]
array[j+1] <- tmp
}
}
}
return(array)
}
bubble_sort(rpois(10,4))
bubble_sort(rpois(10,4))
bubble_sort(rpois(20,4))
bubble_sort(rpois(20,10))
bubble_sort(rpois(20,10))
bubble_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
rpois(20,10)
x <- rpois(20,10)
selection_sort(x)
x
x <- rpois(20,10)
bubble_sort(x)
x
sort(x)
selection_sort(x) == sort(x)
x
selection_sort(x)
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- tmp
}
return(array)
}
x <- rpois(20,10)
selection_sort(x) == sort(x)
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
rpois(20,10)
selection_sort(rpois(20,10))
output <- NULL
array
n <- length(array)
output <- NULL
array
i=1
tmp <- array[i]
j <- i
tmp < array[i-1]
j > 0
tmp < array[i-1] && j > 0
tmp < array[i-1] & j > 0
insert_sort <- function(array){
n <- length(array)
output <- NULL
for (i in 1:n){
tmp <- array[i]
j <- i
while(j > 1){
if (tmp < array[j-1]){
array[j] <- array[j-1]
j <- j-1
}
}
array[j] <- tmp
}
return(array)
}
insert_sort(rpois(20,10))
insert_sort <- function(array){
n <- length(array)
output <- NULL
for (i in 1:n){
tmp <- array[i]
j <- i
while(j > 1){
if (tmp < array[j-1]){
array[j] <- array[j-1]
j <- j-1
}else break
}
array[j] <- tmp
}
return(array)
}
insert_sort(rpois(20,10))
x<- rpois(20,10)
insert_sort(x)
x
parse("1+!")
parse("1+1")
parse(text="1+1")
expression(1+1)
bar <- function(x)print(x + 1)
bar(1)
eval(parse(text = "bar(x)"))
x = 3
eval(parse(text = "bar(x)"))
n = 200
p = 0.2
?prop.test
x <- rbinom(1,153,0.25)
x1 <- rbinom(1,153,0.25)
x2 <- rbinom(1,153,0.2)
x1
x2 <- rbern(153,0.2)
install.packages("LaplacesDemon")
x2 <- rbern(153,0.2)
library(LaplacesDemon)
x2 <- rbern(153,0.2)
x1 <- rbern(100,0.25)
x1
x2 <- rbinom(1,153,0.2)
x1 <- rbinom(1,100,0.25)
prop.test(c(x1,x2), c(100,153), p = c(0.25, 0.20))
prop.test(c(x1,x2), c(100,153), p = c(0.5, 0.20))
prop.test(c(x1,x2), c(100,153))
prop.test
prop.test(c(x1,x2), c(100,153), alternative = "less")
prop.test(c(x1,x2), c(100,153), alternative = "less", p = c(0.2,0.25))
prop.test(c(x1,x2), c(100,153), alternative = "less", p = c(0.25,0.2))
45/308
28229094+58722528.0+61558628.0+62952272.0
tot=28229094+58722528.0+61558628.0+62952272.0
58722528.0/tot
129833.0/2168608.0
110*100
110*100 + 8000 + 500 + 1000 + 2000 + 1000 + 750 + 300
110*75 + 8000 + 500 + 1000 + 2000 + 1000 + 750 + 300
factorial(11)
factorial(11)/11
ptm <- proc.time(); v = 1:10; permutations(n=length(v),r=length(v), v=v, repeats.allowed=F); proc.time() -ptm
library(gtools)
ptm <- proc.time(); v = 1:10; permutations(n=length(v),r=length(v), v=v, repeats.allowed=F); proc.time() -ptm
getwd()
43*40*50
120000*0.04
100000*0.04
100000*0.06
120000*0.06
2017-1945
8259 + 7138
8259 + 7138 - 2300 - 1000
8259 + 7138 - 2300 - 1100
8259 + 7138 - 2300 - 1100 - 798
2000/100
log(10^9)
10/0.5/0.5
140*12
67/55
1.21*37
3.3*2.2
2005-22
15.65+25.22+2.56+4.57+10.01+15.60+4
15.65+25.22+2.56+4.57+10.01+15.60+4+350+100
2.49*1.14
1144-544
122.84+185.31+203.72
36.97+56.08+198.29+6.35+27.64+
0
80+144+65+65+89+13+79
x1 = 80+144+65+65+89+13+79
x2 = 86+35+34+68+30+149.35+38+150
x2
x3=23+66+25+40+25+97+9+80+88+40
x3
x4 = 52+30+40+60+189+92+32+155
x4
x1+x2+x3+x4
(x1+x2+x3+x4)/4
130/30
4.3*7
x = c(17.72,20.13,16.49,16.67,18.83,32.66,125.39,175.27,182.05,163.58,127.28,54.64,22.61,20.18,16.86,15.87)
x
mean(x)
6/16
12/16
18/16
setwd("~/Projects/R/MonotoneDerivatives/")
i<-1
library(dplyr)
load("data/log_Hill_data_optimparam.Rdata") # Obtain by running getOptimParam.R
load("data/log_Hill_Horror_dist.Rdata") # Obtain by running getDataFigure1.R
a <- as.numeric(quantile(sample,0.8)) # Threshold a for GLP
m <- 0:3
d <- 3:1
P <- 1- c(10^-1,10^-2,10^-3,10^-4)
nmax_est_param <- length(m) + length(d)
if (i == 1)
{
names = c(names(designTab), "D", "P",
"ParamCover","boundCover","elapsed.time","CPU.time", "bound","status","eps","C","lastx")
optim <- data.frame(matrix(NA,ncol = length(names), nrow = 1))
names(optim) <- names
constFun = objFun = optim_outDist = list()
} else  load("data/MaxLogdHorrorDist_TailProb.Rdata")
param_est <- designTab[i,]
ind_d <- unlist(param_est[1:length(d)])
ind_m <- unlist(param_est[(length(d)+1):nmax_est_param])
J1 <- union(0, m[ind_m])
J2 <- d[ind_d]
J <- max(J2)
J <- if (J == -Inf)  0 else J
C <- DistributionPty::qlhorror(1-1e-16) # Upper bound of the compact support of the distributions to investigate from
point_estimates <- optim_param[i,!is.na(optim_param[i,])] %>% select(-cover)
constRHS <- NULL
for (j in J2){
newRHS <- point_estimates[paste0("d",j,c("L","U"))] %>% as.numeric %>% `*`((-1)^(j+1)) %>% sort
constRHS <- c(constRHS, newRHS)
}
for (j in J1){
newRHS <- point_estimates[paste0("m",j,c("L","U"))] %>% as.numeric
constRHS <- c(constRHS, newRHS)
}
constDir = rep(c(">=", "<="), length(constRHS)/2)
constLambda = rep(0,length(constRHS))
constLambda[length(constRHS) - c(1,0)] = 1
objLambda <- if (setequal(J1,0))  1 else 0
gamma <- constRHS[2]
k <- nrow(optim)
D<-3
new_constFun <- rep(GLP::buildMomentDerivativeConstFunc(D,J1,J2), each = 2)
initBFS <- GLP:: phase1(new_constFun,
constRHS,
constDir,
constLambda,
C =  C,
IterMax = 200)
p<-0.9
objFun[[k]]  <- function(x, paramObjFun)
{
c <- DistributionPty::qlhorror(p)
output <-  if (max(c-a,0) < x) x^(J-D)/factorial(D)*(x - max(c-a,0))^D else 0
return(output)
}
constFun[[k]] <- new_constFun
start <- proc.time()
out <- GLP::phase2(initBFS = initBFS,
objFun = objFun[[k]] ,
constFun = constFun[[k]] ,
constRHS,
constDir,
constLambda,
objLambda,
C = C,
IterMax = 200,
err = 1e-7)
end <- proc.time()
if (k!=1) optim <- rbind(optim, NA) # Add a row if k is not 1
k
optim[k,1:nmax_est_param] <- designTab[i, ]
optim$D[k] <- D
optim$P[k] <- p
optim$ParamCover[k] <- optim_param$cover[i]
optim$elapsed.time[k] <- (end - start)["elapsed"]
optim$CPU.time[k]     <- (end - start)["user.self"]
optim$bound[k]      <- out$bound
optim$status[k]     <- out$status
optim$eps[k]        <- out$eps
optim$lastx[k]      <- out$lastx
optim$C[k]  <- C
optim$boundCover[k] <- out$bound >= 1-optim$P[k]
optim_outDist[[k]] <- list(x = out$x, p = out$p,  s = out$s, lpdual = out$lpdual)
sum_print <- matrix(c(D,d[ind_d],m[ind_m],signif(out$bound,5),1-p),nrow = 1)
colnames(sum_print) <- c("D",names(ind_d[ind_d]),names(ind_m[ind_m]),"bound", "P" )
print(sum_print)
