1+!
1
install.packages("devtools")
x = seq(0,15,by = 0.01)
plot(x, (sin(x)/x)^2)
plot(x, (sin(x)/x)^2,type = "l")
plot(x, (sin2*x)/sin(x),type = "l")
plot(x,(sin(2*x)/sin(x),type = "l")
plot(x,sin(2*x)/sin(x),type = "l")
plot(x,sin(3*x)/sin(x),type = "l")
plot(x,sin(4*x)/sin(x),type = "l")
plot(x,sin(5*x)/sin(x),type = "l")
plot(x,sin(6*x)/sin(x),type = "l")
plot(x,(sin(6*x)/sin(x))^2,type = "l")
14/9
6/4
a = as.matrix(c(1,1,1,1,2,2,1,2,3))
a
a = as.matrix(c(1,1,1,1,2,2,1,2,3),ncol = 3)
a
a = as.matrix(c(1,1,1,1,2,2,1,2,3),ncol = 3, nrow = 3)
a
a = matrix(c(1,1,1,1,2,2,1,2,3),ncol = 3, nrow = 3)
a
solve(a)
x = seq(0,30,by = 0.01)
plot(x, exp(-x)*x^3)
plot(x, exp(-x)*x^3,type = "l")
f <- function(x, b){
1/(b*x) + sin(b*x)/(bx)^4
}
x = seq(1,100,by = 0.01)
plot(x,f(x,1))
f <- function(x, b){
1/(b*x) + sin(b*x)/(b*x)^4
}
plot(x,f(x,1))
plot(x,f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,1),type = "l")
f <- function(x, b){
1/(b*x)^3 + sin(b*x)/(b*x)^4
}
x = seq(1,10,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,5,by = 0.01); plot(x,f(x,1),type = "l")
f <- function(x, b){
1/(b*x)^3 + sin(b*x)^2/(b*x)^4
}
x = seq(1,5,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,1),type = "l")
f <- function(x, b){
1/(9*(b*x)^3) + sin(b*x)^2/(b*x)^4
}
x = seq(1,2,by = 0.01); plot(x,f(x,1),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,5),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,100),type = "l")
x = seq(1,10,by = 0.01); plot(x,f(x,20),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5)/f(x),type = "l")
x = seq(1,2,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(1,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(100,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(5000,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(500,1000,by = 0.01); plot(x,f(x,5)/f(x,1),type = "l")
x = seq(500,1000,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
x = seq(1,100,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
lines(x,1/9/x^3)
1/5
1/5^3
x = seq(1,1000,by = 0.01); plot(x,f(x,10)/f(x,1),type = "l")
x = seq(0,10,by = 0.01)
plot(x, sin(epx(x)))
plot(x, sin(exp(x)))
plot(x, sin(exp(x)),type = "l")
plot(x, sin(log(x)),type = "l")
plot(x, sin^2(x),type = "l")
plot(x, sin(x)^2,type = "l")
x = seq(0,10,by = 0.01)
plot(x, log(x)/x^1)
x = seq(0,100)
plot(x,x/sin(x))
plot(x,x/sin(x),type = "l")
x = seq(0,1000)
plot(x,x/sin(x),type = "l")
plot(x,x*sin(x),type = "l")
plot(x,1/(x*sin(x)),type = "l")
log(1400)
bubble_sort <- function(array){
n <- length(array)
for (i in 1:n){
for (j in 1:n-i-1){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
}
bubble_sort <- function(array){
n <- length(array)
for (i in 1:n){
for (j in 1:n-i-1){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
return(array)
}
bubble_sort(c(1,4,3,2))
bubble_sort <- function(array){
n <- length(array)
for (i in 1:n){
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
return(array)
}
bubble_sort(c(1,4,3,2))
array <- c(1,4,3,2)
array
n <- length(array)
i
i<-1
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
j
n-i
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
array
i
j=1
array[j] < array[i]
j=2
array[j] < array[i]
j=3
array[j] < array[i]
n-i
tmp <- array[j]
for (j in 1:n-i){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
j
i
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
}
array
bubble_sort <- function(array){
n <- length(array)
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j] < array[i]) {
tmp <- array[j]
array[j] <- array[i]
array[i] <- tmp
}
}
print(array)
}
return(array)
}
bubble_sort(c(1,4,3,2))
bubble_sort <- function(array){
n <- length(array)
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j+1] < array[j]) {
tmp <- array[j]
array[j] <- array[j+1]
array[j+1] <- tmp
}
}
print(array)
}
return(array)
}
bubble_sort(c(1,4,3,2))
bubble_sort(bin(10,1/2))
rbin(10,1/2)
rbinom(10,1/2)
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(100, 10,1/2))
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(10, 10,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/2))
bubble_sort(rbinom(10, 100,1/4))
bubble_sort(rbinom(10, 100,1/4))
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < minimum) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- array[i]
}
return(array)
}
selection_sort(rbinom(10, 100,1/4))
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- array[i]
}
return(array)
}
selection_sort(rbinom(10, 100,1/4))
selection_sort(rbinom(10, 100,1/4))
selection_sort(rbinom(10, 100,1/4))
selection_sort(rbinom(20, 100,1/4))
selection_sort(rbinom(20, 100,1/2))
selection_sort(rbinom(20, 100,1/2))
selection_sort(rbinom(20, 100,1/2))
bubble_sort(rpois(10,1))
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- array[i]
}
return(array)
}
bubble_sort(rpois(10,4))
bubble_sort <- function(array){
n <- length(array)
for (i in 1:(n-1)){
for (j in 1:(n-i)){
if (array[j+1] < array[j]) {
tmp <- array[j]
array[j] <- array[j+1]
array[j+1] <- tmp
}
}
}
return(array)
}
bubble_sort(rpois(10,4))
bubble_sort(rpois(10,4))
bubble_sort(rpois(20,4))
bubble_sort(rpois(20,10))
bubble_sort(rpois(20,10))
bubble_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
rpois(20,10)
x <- rpois(20,10)
selection_sort(x)
x
x <- rpois(20,10)
bubble_sort(x)
x
sort(x)
selection_sort(x) == sort(x)
x
selection_sort(x)
selection_sort <- function(array){
n<- length(array)
for (i in 1:n)
{
# Find min value
min_index <- i
for(j in i:n){
if (array[j] < array[min_index]) min_index <- j
}
# Swap
tmp <- array[i]
array[i] <- array[min_index]
array[min_index] <- tmp
}
return(array)
}
x <- rpois(20,10)
selection_sort(x) == sort(x)
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
selection_sort(rpois(20,10))
rpois(20,10)
selection_sort(rpois(20,10))
output <- NULL
array
n <- length(array)
output <- NULL
array
i=1
tmp <- array[i]
j <- i
tmp < array[i-1]
j > 0
tmp < array[i-1] && j > 0
tmp < array[i-1] & j > 0
insert_sort <- function(array){
n <- length(array)
output <- NULL
for (i in 1:n){
tmp <- array[i]
j <- i
while(j > 1){
if (tmp < array[j-1]){
array[j] <- array[j-1]
j <- j-1
}
}
array[j] <- tmp
}
return(array)
}
insert_sort(rpois(20,10))
insert_sort <- function(array){
n <- length(array)
output <- NULL
for (i in 1:n){
tmp <- array[i]
j <- i
while(j > 1){
if (tmp < array[j-1]){
array[j] <- array[j-1]
j <- j-1
}else break
}
array[j] <- tmp
}
return(array)
}
insert_sort(rpois(20,10))
x<- rpois(20,10)
insert_sort(x)
x
parse("1+!")
parse("1+1")
parse(text="1+1")
expression(1+1)
bar <- function(x)print(x + 1)
bar(1)
eval(parse(text = "bar(x)"))
x = 3
eval(parse(text = "bar(x)"))
n = 200
p = 0.2
?prop.test
x <- rbinom(1,153,0.25)
x1 <- rbinom(1,153,0.25)
x2 <- rbinom(1,153,0.2)
x1
x2 <- rbern(153,0.2)
install.packages("LaplacesDemon")
x2 <- rbern(153,0.2)
library(LaplacesDemon)
x2 <- rbern(153,0.2)
x1 <- rbern(100,0.25)
x1
x2 <- rbinom(1,153,0.2)
x1 <- rbinom(1,100,0.25)
prop.test(c(x1,x2), c(100,153), p = c(0.25, 0.20))
prop.test(c(x1,x2), c(100,153), p = c(0.5, 0.20))
prop.test(c(x1,x2), c(100,153))
prop.test
prop.test(c(x1,x2), c(100,153), alternative = "less")
prop.test(c(x1,x2), c(100,153), alternative = "less", p = c(0.2,0.25))
prop.test(c(x1,x2), c(100,153), alternative = "less", p = c(0.25,0.2))
45/308
28229094+58722528.0+61558628.0+62952272.0
tot=28229094+58722528.0+61558628.0+62952272.0
58722528.0/tot
129833.0/2168608.0
110*100
110*100 + 8000 + 500 + 1000 + 2000 + 1000 + 750 + 300
110*75 + 8000 + 500 + 1000 + 2000 + 1000 + 750 + 300
factorial(11)
factorial(11)/11
ptm <- proc.time(); v = 1:10; permutations(n=length(v),r=length(v), v=v, repeats.allowed=F); proc.time() -ptm
library(gtools)
ptm <- proc.time(); v = 1:10; permutations(n=length(v),r=length(v), v=v, repeats.allowed=F); proc.time() -ptm
getwd()
43*40*50
120000*0.04
100000*0.04
100000*0.06
120000*0.06
2017-1945
8259 + 7138
8259 + 7138 - 2300 - 1000
8259 + 7138 - 2300 - 1100
8259 + 7138 - 2300 - 1100 - 798
2000/100
log(10^9)
10/0.5/0.5
140*12
67/55
1.21*37
3.3*2.2
2005-22
15.65+25.22+2.56+4.57+10.01+15.60+4
15.65+25.22+2.56+4.57+10.01+15.60+4+350+100
2.49*1.14
1144-544
122.84+185.31+203.72
36.97+56.08+198.29+6.35+27.64+
0
80+144+65+65+89+13+79
x1 = 80+144+65+65+89+13+79
x2 = 86+35+34+68+30+149.35+38+150
x2
x3=23+66+25+40+25+97+9+80+88+40
x3
x4 = 52+30+40+60+189+92+32+155
x4
x1+x2+x3+x4
(x1+x2+x3+x4)/4
130/30
4.3*7
x = c(17.72,20.13,16.49,16.67,18.83,32.66,125.39,175.27,182.05,163.58,127.28,54.64,22.61,20.18,16.86,15.87)
x
mean(x)
6/16
12/16
18/16
?GLP::getCIMomentAndDerivatives
setwd("~/Projects/R/MonotoneDerivatives/")
remove(list = ls())
library(ggplot2)
load("data/log_Hill_Horror_CI.RData")
load("data/log_Hill_Horror_CI.RData")
dataPlot <- NULL
for (i in 1:length(CI))
{
bootSample <- CI[[i]]$bootSample
newDataPlot <- data.frame(a =  CI[[i]]$a,
parameter = rep(c("Second order density derivative", "First order density derivative", "Density function"),3),
value =  as.numeric(c(CI[[i]]$hyperrectangle[1,1:3], CI[[i]]$hyperrectangle[2,1:3], as.numeric(apply(bootSample[,1:3],2,mean)))),
group = rep(c("lB", "uB", "Fhat"),each  = 3),
type = c(rep("Bootstrap 95% CI", 6),rep("Bootstrapped estimated function", 3) ))
dataPlot <- rbind(dataPlot, newDataPlot)
}
plot <- ggplot(dataPlot, aes(x = a, y  = value, group = group)) +
geom_line(aes(linetype = type)) +
geom_vline(xintercept = DistributionPty::qlhorror(0.8), colour = "grey")+
labs(y = "", linetype = "", x = "") +
facet_wrap(~parameter, ncol = 2, scales = "free") +
theme(legend.position = c(9.95/10, 2/8), legend.justification = c(1, 0))
plot
ggsave(plot, file = "pics/Figure2.pdf", width = 5,height = 5,dpi=300)
CI
CI[[1]]
